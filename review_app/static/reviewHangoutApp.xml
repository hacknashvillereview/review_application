<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<!-- Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *      
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License
-->
        <ModulePrefs title="Hangout Starter">
                <Require feature="rpc" />
                <Require feature="views" />
                <Require feature="locked-domain" />
        </ModulePrefs>
        <Content type="html"><![CDATA[     

<html>
<style type="text/css">
<!--
.button {
  border-radius: 3px;
  -moz-border-radius: 3px;
  background: -webkit-gradient(linear, left top, left bottom, from(#fff), to(#ddd));
  background: -moz-linear-gradient(top, #fff, #ddd);  
  border: 1px solid #bbb;
}

.button:active {
        background: -webkit-gradient(linear, left top, left bottom, from(#aaa), to(#333)); 
        background: -moz-linear-gradient(bottom, #ddd, #aaa); }

-->
</style>
<body>

<script src="//plus.google.com/hangouts/_/api/v1/hangout.js"></script>

<h3>Simple Hangout App</h3>

<p>
<input class="button" type="button" value="Show participants" id="showParticipants" 
    style="visibility:hidden;"
    onClick="showParticipants()"/>
</p>

<p>
<input class="button" type="button" value="Mute participants" id="muteParticipants" 
    style="visibility:hidden;"
    onClick="muteParticipants()"/>
</p>

<div id="participantsDiv"></div>

<hr>

<p><a href="http://developers.google.com/+/hangouts/getting-started">Read the docs</a> to learn more about developing hangouts!</a></p>

<script>
function showParticipants() {
  var participants = gapi.hangout.getParticipants();
  var isOnAir = gapi.hangout.onair.isOnAirHangout();

  console.log('isOnAir', isOnAir);

  var retVal = '<p>Participants: </p><ul>';

  for (var index in participants) {
    var participant = participants[index];

    if (!participant.person) {
      retVal += '<li>A participant not running this app</li>';
    }
    retVal += '<li>' + participant.person.displayName + '</li>';
  }

  retVal += '</ul>';

  var div = document.getElementById('participantsDiv');

  div.innerHTML = retVal;
}

function muteParticipants() {
  var participants = gapi.hangout.getParticipants();

  for (var index in participants) {
    var participant = participants[index];

    console.log(participant);

    if (participant.person) {
      gapi.hangout.av.muteParticipantMicrophone(participant.id);
    }
  }
}

var globalState = {};
var defaultGlobalState = {
  'presenterId':'',
  'isPresenting': false,
  'isPaused': false,
  'releaseNotesUrl':''
}

function isPresenter() {
  console.log('isPresenter, presenterId: ' + gapi.hangout.data.getValue('presenterId'));
  console.log('isPresenter, getLocalParticipantId: ' + gapi.hangout.getLocalParticipantId()); 
  return (gapi.hangout.data.getValue('presenterId') == gapi.hangout.getLocalParticipantId());
}

function updateLayout() {
  if (isPresenter()) {
    console.log('I\'m the presenter!');
  } else {
    console.log('I\'m a participant!');
  }
}

function init() {
  // When API is ready...                                                         
  gapi.hangout.onApiReady.add(
      function(eventObj) {
        if (eventObj.isApiReady) {
          document.getElementById('showParticipants').style.visibility = 'visible';
          document.getElementById('muteParticipants').style.visibility = 'visible';

          var globalPresenterId = gapi.hangout.data.getValue('presenterId');
          console.log('presenterID = ' + globalPresenterId);

          if (typeof(globalPresenterId) == 'undefined') {
            gapi.hangout.data.setValue('presenterId',''+gapi.hangout.getLocalParticipantId());
            gapi.hangout.data.setValue('isPresenting','false');
            gapi.hangout.data.setValue('isPaused','true');
            gapi.hangout.data.setValue('releaseNotesUrl','');
          }

          updateLayout();

          console.log('attempting to set state change event...');
          gapi.hangout.data.onStateChanged.add(updateLayout);
          console.log('set state change event...');

        }
      });
}

// Wait for gadget to load.                                                       
gadgets.util.registerOnLoadHandler(init);
</script>
</body>
]]>
</Content>
</Module>