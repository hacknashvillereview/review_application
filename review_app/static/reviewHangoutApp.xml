
<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<!-- Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *      
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License
-->
        <ModulePrefs title="Hangout Starter">
                <Require feature="rpc" />
                <Require feature="views" />
                <Require feature="locked-domain" />
        </ModulePrefs>
        <Content type="html"><![CDATA[     

<html>
<style type="text/css">
<!--
.button {
  border-radius: 3px;
  -moz-border-radius: 3px;
  background: -webkit-gradient(linear, left top, left bottom, from(#fff), to(#ddd));
  background: -moz-linear-gradient(top, #fff, #ddd);  
  border: 1px solid #bbb;
}

.button:active {
        background: -webkit-gradient(linear, left top, left bottom, from(#aaa), to(#333)); 
        background: -moz-linear-gradient(bottom, #ddd, #aaa); }

-->
</style>
<body>

<script src="//plus.google.com/hangouts/_/api/v1/hangout.js"></script>

<h3>Hack Nashville Review Hangout App</h3>

<p>
<input class="button" type="button" value="Start Presenting" id="startPresenting" 
    style="visibility:hidden;"
    onClick="startPresenting()"/>
</p>

<div id="participantsDiv"></div>

<div id="ownerDiv"></div>

<hr>

<p><a href="http://developers.google.com/+/hangouts/getting-started">Read the docs</a> to learn more about developing hangouts!</a></p>

<script>
function showParticipants() {
  var participants = gapi.hangout.getParticipants();
  var isOnAir = gapi.hangout.onair.isOnAirHangout();

  var retVal = '<p>Participants: </p><ul>';

  for (var index in participants) {
    var participant = participants[index];

    if (!participant.person) {
      retVal += '<li>A participant not running this app</li>';
    }
    retVal += '<li>' + participant.person.displayName + '<button onClick="makePresenter(\''+participant.id+'\')">Make Presenter</button></li>';
  }

  retVal += '</ul>';

  var div = document.getElementById('participantsDiv');

  div.innerHTML = retVal;
}

function makePresenter (participantId) {
  console.log('Giving control to ', participantId);
  gapi.hangout.data.setValue('isPresenter', participantId);
}

function startPresenting() {
  var participant = gapi.hangout.getLocalParticipantId();
  gapi.hangout.data.setValue('tookControl', participant);
}

function init() {
  // When API is ready... 


  gapi.hangout.data.onStateChanged.add(function (payload) {
    var div = document.getElementById('ownerDiv');
    var participant = gapi.hangout.getLocalParticipantId();

    console.log(payload);

    // Someone was set as the presenter
    if (payload.addedKeys[0].key === 'isPresenter') {
      div.innerHTML = '<h3>' +  payload.addedKeys[0].value + ' is now the presenter</h3>';

      if (payload.addedKeys[0].value === participant) {
        document.getElementById('startPresenting').style.visibility = 'visible';
      } else {
        document.getElementById('startPresenting').style.visibility = 'hidden';
      }

    // Presenter started the demo. Mute all mics.
    } else if (payload.addedKeys[0].key === 'tookControl') {
      if (payload.addedKeys[0].key !== participant) {
        gapi.hangout.av.setMicrophoneMute(true);
      } else {
        gapi.hangout.av.setMicrophoneMute(false);
      }
    }
  });

  gapi.hangout.onApiReady.add(
      function(eventObj) {
        if (eventObj.isApiReady) {
          showParticipants();
        }
      });
}

// Wait for gadget to load.                                                       
gadgets.util.registerOnLoadHandler(init);
</script>
</body>
]]>
</Content>
</Module>